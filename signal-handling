#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <errno.h>
#include <sys/stat.h>
#include <unistd.h>


int cs531_system(char *s);

void sig_handler(int signo)
{
	  if (signo == SIGINT)
							printf("received SIGINT\n");
		else if (signo == SIGQUIT)
							printf("received SIGQUIT\n");
		else if (signo == SIGKILL)
							printf("received SIGKILL\n");
		else if (signo == SIGSTOP)
							printf("received SIGSTOP\n");
}

int main(int argc, char *argv[])
{
				int status;
				status = cs531_system(argv[1]); //Passing command received from command line
				return status;
}

int cs531_system(char *s)
{
				pid_t pid, cpid;//process ids for parent-id and child-id 
				struct sigaction intsave, quitsave;
				int pstat;//for the status of the process 
				 int tty;
                                tty=open("/dev/tty",1);//opens controlling terminal for the current process 
				char *argp[] = {"sh", "-c", NULL, NULL};

				if (!s)		/* NULL check */
						return -1;

				argp[2] = (char *)s;

				//Register signal handlers
				if (signal(SIGINT, sig_handler) == SIG_ERR)//signal() returns the previous value of the signal handler or SIG_ERR for an error
								printf("\ncan't catch SIGINT\n");
				if (signal(SIGQUIT, sig_handler) == SIG_ERR)
								printf("\ncan't catch SIGQUIT\n");
				if (signal(SIGSTOP, sig_handler) == SIG_ERR)
								printf("\ncan't catch SIGSTOP\n");
				if (signal(SIGKILL, sig_handler) == SIG_ERR)
								printf("\ncan't catch SIGKILL\n");

				cpid = fork(); //Creating child Process to execute 
				if (cpid == -1) {
								//Failure in executing the command passed
								printf("\nFailure in executing command %s\n",s);
								return -1;
				} 
				else if (cpid == 0) 
				{
								 //Child context
								close(0); dup(tty);//creates the copy of file descriptor and closes the previous terminal..clears 0 and dup gives tty 0 i.e, the file descriptor, the lowest available value
								close(1); dup(tty);
								close(2); dup(tty);
								close(tty);
						printf("\nExecutingcommand %s\n",s);
						execlp("sh","sh","-c", s,(char*)0);
						 //execute the command using the shell
                        return 0;
				}

				//Parent context 
				sigaction(SIGINT, NULL, &intsave);
				sigaction(SIGQUIT, NULL, &quitsave);
				 wait(NULL);
                                sleep(10);
                                sigaction(SIGINT, &intsave, NULL);
                                sigaction(SIGQUIT, &quitsave, NULL);
				return (pid == -1 ? -1 : pstat); //Return the status of child thread status
}

